#pragma kernel Flock
//#pragma kernel TrailCalc

struct BoidData
{
	float3 position;
	float3 velocity;
    float3 acceleration;
    int numNeighbors;
};

//struct BoidFlockCalcuations
//{
//    float3 align;
//    float3 cohesion;
//    float3 separation;
//};

struct Magnet
{
    float3 position;
    float range;
    bool isAttractor;
};

struct Trail
{
    float3 position;
    int trailNum;
    int numNeighbors;
};

RWStructuredBuffer<BoidData> boidBufferRead;
RWStructuredBuffer<BoidData> boidBufferWrite;
RWStructuredBuffer<Magnet> magnetBufferRead;

RWStructuredBuffer<Trail> trailBuffer;

#define BLOCK_SIZE 256


int BUFFER_SIZE;

//uint TRAIL_BUFFER_SIZE;
uint NUM_TRAILS;
uint CURR_TRAIL_NUM;

float DELTA_TIME;
float REGION_SIZE;
float MAX_SPEED;
float MAX_FORCE;
float NEIGHBOR_DISTANCE;
float BOID_RADIUS;


int NUM_MAGNETS;

float3 MOUSE_POS;


void ApplyForce(uint3 id, float3 force)
{
    boidBufferRead[id.x].acceleration = boidBufferRead[id.x].acceleration + force;
}

float3 ClampFloat3Magnitude(float3 vector3, float magnitude)
{
    if (length(vector3) > magnitude)
    {
        return mul(normalize(vector3), magnitude);
    }
    else
    {
        return vector3;
    }
}

float3 Seek(uint3 id, float3 target)
{
    float distFromBoidToTarget = distance(boidBufferRead[id.x].position, target);

    float3 desired = target - boidBufferRead[id.x].position;
    desired = MAX_SPEED * normalize(desired);
    float3 steer = desired - boidBufferRead[id.x].velocity;
    steer = ClampFloat3Magnitude(steer, MAX_FORCE);
    steer = lerp(float3(0, 0, 0), steer, distance(boidBufferRead[id.x].position, target) / 100);
    //steer = ((NEIGHBOR_DISTANCE * 2) * ((smoothstep(0, NEIGHBOR_DISTANCE * 2, distFromBoidToTarget)), 2)) * steer;
    return steer;
}

//////// TODO: needs to be fixed
float3 SeekAttractor(uint3 id, float3 target)
{

    
    float distFromBoidToTarget = distance(boidBufferRead[id.x].position, target);

    float3 desired = target - boidBufferRead[id.x].position;
    desired = MAX_SPEED * normalize(desired);
    float3 steer = desired - boidBufferRead[id.x].velocity;
    steer = ClampFloat3Magnitude(steer, MAX_FORCE);
    //steer = lerp(float3(0, 0, 0), steer, distance(boidBufferRead[id.x].position, target) / 100);
    steer = ((NEIGHBOR_DISTANCE * 2) * (1-(smoothstep(0, NEIGHBOR_DISTANCE * 2, distFromBoidToTarget)), 2)-NEIGHBOR_DISTANCE) * steer;
    
    return steer;
}


//// seek with arrive
float3 SeekWithArrive(uint3 id, float3 target)
{
    float3 desired = target - boidBufferRead[id.x].position;
    float distance = length(desired);
    desired = normalize(desired);

    if (distance < 2 * NEIGHBOR_DISTANCE)
    {
        float m = smoothstep(0, 2 * NEIGHBOR_DISTANCE, distance) * MAX_SPEED;
        desired = m * desired;
    }
    else
    {
        //return float3(0, 0, 0);
        desired = desired * MAX_SPEED;
    }
    
    float3 steer = desired - boidBufferRead[id.x].velocity;
    steer = ClampFloat3Magnitude(steer, MAX_FORCE);
    return steer;
}

float3 Escape(uint3 id, float3 target)
{
    float distFromBoidToTarget = distance(boidBufferRead[id.x].position, target);
    float3 desired = target - boidBufferRead[id.x].position;
    desired = MAX_SPEED * normalize(desired);
    float3 steer = boidBufferRead[id.x].velocity - desired;
    steer = ClampFloat3Magnitude(steer, MAX_FORCE);
    //steer = steer* (distFromBoidToTarget / (REGION_SIZE/5));
    steer = ((NEIGHBOR_DISTANCE*4)*pow((1-smoothstep(0, NEIGHBOR_DISTANCE*2, distFromBoidToTarget)),2) ) *steer;

    return steer;
}


[numthreads(BLOCK_SIZE,1,1)]
void Flock (uint3 id : SV_DispatchThreadID)
{
    //// trail stuff
    
	/////// CHECK FOR BOUND$
    float3 swerve = float3(0, 0, 0);

	if (boidBufferRead[id.x].position.x > REGION_SIZE - NEIGHBOR_DISTANCE)
    {
        swerve.x = -MAX_SPEED;
    }
    else if (boidBufferRead[id.x].position.x < 0 + NEIGHBOR_DISTANCE)
    {
        swerve.x = MAX_SPEED;
    }
    else if (boidBufferRead[id.x].position.y > REGION_SIZE - NEIGHBOR_DISTANCE)
    {
        swerve.y = -MAX_SPEED;
    }
    else if (boidBufferRead[id.x].position.y < 0 + NEIGHBOR_DISTANCE)
    {
        swerve.y = MAX_SPEED;
    }
    else if (boidBufferRead[id.x].position.z > REGION_SIZE)
    {
        swerve.z = -MAX_SPEED;
    }
    else if (boidBufferRead[id.x].position.z < 0)
    {
        swerve.z = MAX_SPEED;
    }



    swerve = ClampFloat3Magnitude(swerve, MAX_FORCE);
    ApplyForce(id, swerve);

    
    float distBetweenBoidAndOther = 0;
    float3 diffBetweenBoidAndOther = float3(0, 0, 0);

    float alignCount = 0;
    float3 alignSum = 0;

    float separation = BOID_RADIUS * 2;
    float3 separationSum = float3(0, 0, 0);
    int separationCount = 0;

    float3 cohesionSum = float3(0, 0, 0);
    int cohesionCount = 0;

	[loop]
    for (int i = 0; i < BUFFER_SIZE; i++)
    {
        distBetweenBoidAndOther = distance(boidBufferRead[id.x].position, boidBufferRead[i].position);

        /// separation stuff
        if (distBetweenBoidAndOther > 0 && distBetweenBoidAndOther < separation)
        {
            diffBetweenBoidAndOther = normalize(boidBufferRead[id.x].position - boidBufferRead[i].position);
            separationSum += diffBetweenBoidAndOther;
            separationCount++;
        }
        
        if (distBetweenBoidAndOther > 0 && distBetweenBoidAndOther < NEIGHBOR_DISTANCE)
        {
            // align stuff
            alignSum += boidBufferRead[i].velocity;
            alignCount++;

            /// cohesion stuff
            cohesionSum += boidBufferRead[i].position;
            cohesionCount++;
        }

        
    }

    if (NUM_MAGNETS > 0)
    {
        [loop]
        for (int i = 0; i < NUM_MAGNETS; i++)
        {
            if (magnetBufferRead[i].isAttractor)
            {
                ApplyForce(id, SeekWithArrive(id, magnetBufferRead[i].position));
            }
            else
            {
                ApplyForce(id, Escape(id, magnetBufferRead[i].position));
            }
        }

    }

    ApplyForce(id, Escape(id, MOUSE_POS));


    if (cohesionCount > 0)
    {
        cohesionSum /= cohesionCount;
        ApplyForce(id, SeekWithArrive(id, cohesionSum));
    }

    if (alignCount > 0)
    {
        alignSum = alignSum / alignCount;
        alignSum = normalize(alignSum) * MAX_SPEED;
        alignSum = ClampFloat3Magnitude(alignSum - boidBufferRead[id.x].velocity,MAX_FORCE);
        ApplyForce(id, alignSum);


        boidBufferWrite[id.x].numNeighbors = cohesionCount;
    }

    if (separationCount > 0)
    {
        separationSum = separationSum / separationCount;
        separationSum = normalize(separationSum) * MAX_SPEED;
        separationSum = separationSum - boidBufferRead[id.x].velocity;
        separationSum = ClampFloat3Magnitude(separationSum, MAX_FORCE);
        ApplyForce(id, separationSum);
    }


   
    //AllMemoryBarrierWithGroupSync();

    boidBufferWrite[id.x].velocity = ClampFloat3Magnitude(boidBufferRead[id.x].velocity + boidBufferRead[id.x].acceleration, MAX_SPEED);

	boidBufferWrite[id.x].position = boidBufferRead[id.x].position + boidBufferWrite[id.x].velocity*DELTA_TIME;
    boidBufferWrite[id.x].acceleration = float3(0, 0, 0);
    //// fix below later
    boidBufferRead[id.x] = boidBufferWrite[id.x];


    uint trailNumber = (id.x * NUM_TRAILS) + CURR_TRAIL_NUM;

    trailBuffer[trailNumber].position = boidBufferWrite[id.x].position;
    trailBuffer[trailNumber].trailNum = CURR_TRAIL_NUM;
    trailBuffer[trailNumber].numNeighbors = cohesionCount;

}

//[numthreads(BLOCK_SIZE,1,1)]
//void TrailCalc(uint3 id : SV_DispatchThreadID)
//{
//    uint trailNumber = (id.x * NUM_TRAILS) + CURR_TRAIL_NUM;

//    trailBuffer[trailNumber].position = boidBufferRead[id.x].position;
//    trailBuffer[trailNumber].trailNum = CURR_TRAIL_NUM;
//}

